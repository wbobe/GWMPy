# -*- coding: utf-8 -*-
"""
Decision variables class for the DECVAR GWM file
"""
import os
import pandas as pd



class GWM(object):
    """
    Groundwater Management model class
    """
    def __init__(self, name, workspace, IPRN):
        self.name = str(name)
        self.workspace = str(workspace)
        self.IPRN = IPRN
        self.packages = {}
    def setPackages(self, package):
        self.packages[package.__class__.__name__] = package
        
    def writeInput(self):
        for package in self.packages:
            if self.packages[package].fileToBeWritten:
                self.packages[package].writeFile()
        return

########################################################################################################################################       
        
class DECVAR(object):
    """
    Decision variables model class
    """
    def __init__(self, model, obj_df, IPRN = None, GWMFILE = 0):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.GWMFILE = GWMFILE
        self.FVAR_df = obj_df[obj_df['fv_name'] != 'none']
        self.EVAR_df = obj_df[obj_df['ev_name'] != 'none']
        self.BVAR_df = obj_df[obj_df['bv_name'] != 'none']      
        self.NFVAR = len(self.FVAR_df.index)
        self.NEVAR = len(self.EVAR_df.index)
        self.NBVAR = len(self.BVAR_df.index)
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = self.NFVAR + self.NBVAR + self.NEVAR > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull decvar file generated by that tool' + '\n')
        lines.append('# Describtion of the decision variables used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' ' + str(self.GWMFILE) + ' # IPRN, GWMFILE' + '\n')
        lines.append(str(self.NFVAR) + ' ' + str(self.NEVAR) + ' ' + str(self.NBVAR) + ' # NFVAR, NEVAR, NBVAR' + '\n')
        
        if self.NFVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'fv_name']) + ' ' + str(self.FVAR_df.at[i,'nc']) + ' ' + str(self.FVAR_df.at[i,'lay']) + ' ' + str(self.FVAR_df.at[i,'row']) + ' ' + str(self.FVAR_df.at[i,'col']) + ' ' + str(self.FVAR_df.at[i,'f_type']) + ' ' + str(self.FVAR_df.at[i,'f_stat']) + ' ' + str(self.FVAR_df.at[i,'wsp']) + '\n')
        if self.NEVAR > 0:
            for decvar in range(self.NEVAR):
                lines.append()
        if self.NFVAR > 0:
            for decvar in range(self.NEVAR):
                lines.append(str(self.FVAR_df.at[i,'bv_name']) + ' 1 ' + str(self.FVAR_df.at[i,'fv_name']) + '\n')
        
        newFileName = os.path.join(self.workspace, self.name + '.decvar')
        newFile = open(newFileName, 'w')
        print lines
        newFile.writelines(lines)
        newFile.close()
        return

########################################################################################################################################

class VARCON(object):
    def __init__(self, model, obj_df, IPRN = None):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.FVAR_df = obj_df[obj_df['fv_name'] != 'none']
        self.EVAR_df = obj_df[obj_df['ev_name'] != 'none']
        self.BVAR_df = obj_df[obj_df['bv_name'] != 'none']      
        self.NFVAR = len(self.FVAR_df.index)
        self.NEVAR = len(self.EVAR_df.index)
        self.NBVAR = len(self.BVAR_df.index)
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = self.NFVAR + self.NBVAR + self.NEVAR > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull varcon file generated by that tool' + '\n')
        lines.append('# Describtion of the variables constraints used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
                
        if self.NFVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'fv_name']) + ' ' + str(float(self.FVAR_df.at[i,'fv_min'])) + ' ' + str(float(self.FVAR_df.at[i,'fv_max'])) + ' ' + str(float(self.FVAR_df.at[i,'fv_ref'])) + '\n')
        if self.NBVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'bv_name']) + ' ' + str(float(self.FVAR_df.at[i,'bv_min'])) + ' ' + str(float(self.FVAR_df.at[i,'bv_max'])) + ' ' + str(float(self.FVAR_df.at[i,'bv_ref'])) + '\n')
        if self.NEVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'ev_name']) + ' ' + str(float(self.FVAR_df.at[i,'ev_min'])) + ' ' + str(float(self.FVAR_df.at[i,'ev_max'])) + ' ' + str(float(self.FVAR_df.at[i,'ev_ref'])) + '\n')

        newFileName = os.path.join(self.workspace, self.name + '.varcon')
        newFile = open(newFileName, 'w')
        print lines
        newFile.writelines(lines)
        newFile.close()
        return
        
########################################################################################################################################

class SUMCON(object):
    def __init__(self, model, obj_df, IPRN = None):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.FVAR_df = obj_df[obj_df['fv_name'] != 'none']
        self.EVAR_df = obj_df[obj_df['ev_name'] != 'none']
        self.BVAR_df = obj_df[obj_df['bv_name'] != 'none']      
        self.NFVAR = len(self.FVAR_df.index)
        self.NEVAR = len(self.EVAR_df.index)
        self.NBVAR = len(self.BVAR_df.index)
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = self.NFVAR + self.NBVAR + self.NEVAR > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull varcon file generated by that tool' + '\n')
        lines.append('# Describtion of the variables constraints used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
                
        if self.NFVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'fv_name']) + ' ' + str(float(self.FVAR_df.at[i,'fv_min'])) + ' ' + str(float(self.FVAR_df.at[i,'fv_max'])) + ' ' + str(float(self.FVAR_df.at[i,'fv_ref'])) + '\n')
        if self.NBVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'bv_name']) + ' ' + str(float(self.FVAR_df.at[i,'bv_min'])) + ' ' + str(float(self.FVAR_df.at[i,'bv_max'])) + ' ' + str(float(self.FVAR_df.at[i,'bv_ref'])) + '\n')
        if self.NEVAR > 0:
            for i in range(self.NFVAR):
                lines.append(str(self.FVAR_df.at[i,'ev_name']) + ' ' + str(float(self.FVAR_df.at[i,'ev_min'])) + ' ' + str(float(self.FVAR_df.at[i,'ev_max'])) + ' ' + str(float(self.FVAR_df.at[i,'ev_ref'])) + '\n')

        newFileName = os.path.join(self.workspace, self.name + '.varcon')
        newFile = open(newFileName, 'w')
        print lines
        newFile.writelines(lines)
        newFile.close()
        return
        
########################################################################################################################################

class HEDCON(object):
    def __init__(self, model, obs_df, IPRN = None):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.HB_df = obs_df[obs_df['con_type'] == 'hb']
        self.DD_df = obs_df[obs_df['con_type'] == 'dd']
        self.DF_df = obs_df[obs_df['con_type'] == 'df']
        self.GD_df = obs_df[obs_df['con_type'] == 'gd']
        self.NHB = len(self.HB_df.index) #number of head-bound constraints
        self.NDD = len(self.DD_df.index) #number of drawdown constraints
        self.NDF = len(self.DF_df.index) #number of head difference constraints
        self.NGD = len(self.GD_df.index) #number of gradient constraints
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = self.NHB + self.NDD + self.NDF + self.NGD > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull hedcon file generated by that tool' + '\n')
        lines.append('# Head - constraints used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
        lines.append(str(self.NHB) + ' ' + str(self.NDD) + ' ' + str(self.NDF) + ' ' + str(self.NGD) + ' # NHB NDD NDF NGD' + '\n')
                
        if self.NHB > 0:
            for i in range(self.NHB):
                lines.append(str(self.HB_df.at[i,'name']) + ' ' + str(self.HB_df.at[i,'lay']) + ' ' + str(self.HB_df.at[i,'row']) + ' ' + str(self.HB_df.at[i,'col']) + ' ' + str(self.HB_df.at[i,'bnd_type']) + ' ' + str(float(self.HB_df.at[i,'bnd'])) + ' ' + str(self.HB_df.at[i,'nsp']) + '\n')
        if self.NDD > 0:
            for i in range(self.NDD):
                lines.append(str(self.DD_df.at[i,'name']) + ' ' + str(self.DD_df.at[i,'lay']) + ' ' + str(self.DD_df.at[i,'row']) + ' ' + str(self.DD_df.at[i,'col']) + ' ' + str(self.DD_df.at[i,'bnd_type']) + ' ' + str(float(self.DD_df.at[i,'bnd'])) + ' ' + str(self.DD_df.at[i,'nsp']) + '\n')
        if self.NDF > 0:
            for i in range(self.NDF):
                lines.append(str(self.DF_df.at[i,'name']) + ' ' + str(self.DF_df.at[i,'lay']) + ' ' + str(self.DF_df.at[i,'row']) + ' ' + str(self.DF_df.at[i,'col']) + ' ' + str(self.DF_df.at[i,'bnd_type']) + ' ' + str(float(self.DF_df.at[i,'bnd'])) + ' ' + str(self.DF_df.at[i,'nsp']) + '\n')
        if self.NGD > 0:
            for i in range(self.NGD):
                lines.append(str(self.GD_df.at[i,'name']) + ' ' + str(self.GD_df.at[i,'lay']) + ' ' + str(self.GD_df.at[i,'row']) + ' ' + str(self.GD_df.at[i,'col']) + ' ' + str(self.GD_df.at[i,'bnd_type']) + ' ' + str(float(self.GD_df.at[i,'bnd'])) + ' ' + str(self.GD_df.at[i,'nsp']) + '\n')
        
        newFileName = os.path.join(self.workspace, self.name + '.hedcon')
        newFile = open(newFileName, 'w')
        print lines
        newFile.writelines(lines)
        newFile.close()
        return
        
########################################################################################################################################

class OBJFUNC(object):
    def __init__(self, model, fnc_df, OBJTYP, FNTYP, IPRN = None):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.OBJTYP = OBJTYP
        self.FNTYP = FNTYP
        self.OBJF_df = fnc_df
        self.NOBJF = len(self.OBJF_df.index)
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = self.NOBJF > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull objfnc file generated by that tool' + '\n')
        lines.append('# Objective function variables and their weights used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
        lines.append(str(self.OBJTYP) + ' ' + str(self.OBJTYP) + ' #OBJTYP  FNTYP' '\n')        
        
        if self.NOBJF > 0:
            for i in range(self.NOBJF):
                lines.append(str(self.OBJF_df.at[i,'name']) + ' ' + str(float(self.OBJF_df.at[i,'weight'])) + '\n')

        newFileName = os.path.join(self.workspace, self.name + '.objfnc')
        newFile = open(newFileName, 'w')
        print lines
        newFile.writelines(lines)
        newFile.close()
        return
        
########################################################################################################################################
     
class SOLN(object):
    def __init__(self,model,SOLNTYP,IRM,LPITMAX,BBITMAX,DELTA,NSIGDIG,NPGNMX,PGFACT,CRITMFC,BBITPRT,RANGE,IBASE):
        self.SOLNTYP = SOLNTYP
        self.IRM = IRM
        self.LPITMAX = LPITMAX 
        self.BBITMAX = BBITMAX
        self.DELTA = DELTA
        self.NSIGDIG = NSIGDIG 
        self.NPGNMX = NPGNMX 
        self.PGFACT = PGFACT 
        self.CRITMFC = CRITMFC
        self.BBITPRT = BBITPRT
        self.RANGE = RANGE
        self.IBASE = IBASE
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = True
        model.setPackages(self)
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull soln file generated by that tool' + '\n')
        lines.append('# Solver parameters used in the GWM' + '\n')
        lines.append(str(self.SOLNTYP) + ' # SOLNTYP' + '\n')
        lines.append(str(self.IRM) + ' # IRM' + '\n')
        lines.append(str(self.LPITMAX) + ' ' + str(self.BBITMAX) + ' #LPITMAX  BBITMAX' + '\n')
        lines.append(str(self.DELTA) + ' # DELTA' + '\n')
        lines.append(str(self.NSIGDIG) + ' ' + str(self.NPGNMX) + ' ' + str(self.PGFACT) + ' ' + str(self.CRITMFC) + ' #NSIGDIG NPGNMX PGFACT CRITMFC' + '\n')
        lines.append(str(self.BBITPRT) + ' ' + str(self.RANGE) + ' #BBITPRT  RANGE' + '\n')
        lines.append(str(self.IBASE) + ' # IBASE' + '\n')
        newFileName = os.path.join(self.workspace, self.name + '.soln')
        newFile = open(newFileName, 'w')
        print lines
        newFile.writelines(lines)
        newFile.close()
        return
########################################################################################################################################
        
name = 'test'
workspace = 'D:\gwm'
FNTYP = 'WSDV'
OBJTYP = 'MIN'
IPRN = 1
SOLNTYP = 'LP'
IRM = 2
LPITMAX = 1000 
BBITMAX = 2000
DELTA = 0.5
NSIGDIG = 1 
NPGNMX = 10 
PGFACT = 0.5 
CRITMFC = 0.0
BBITPRT = 1
RANGE = 1
IBASE = 0

obj_df = pd.read_excel("D:\gwm_sample.xlsx",'objects')
obs_df = pd.read_excel("D:\gwm_sample.xlsx",'obsevations')
fnc_df = pd.read_excel("D:\gwm_sample.xlsx",'obj_func')
gen_df = pd.read_excel("D:\gwm_sample.xlsx",'general')       
mod = GWM(name, workspace, IPRN)
decvar = DECVAR(mod, obj_df)
varcon = VARCON(mod, obj_df)
objfnc = OBJFUNC(mod, fnc_df, OBJTYP, FNTYP)
soln = SOLN(mod,SOLNTYP,IRM,LPITMAX,BBITMAX,DELTA,NSIGDIG,NPGNMX,PGFACT,CRITMFC,BBITPRT,RANGE,IBASE)
hedcon = HEDCON(mod, obs_df, )
mod.writeInput()