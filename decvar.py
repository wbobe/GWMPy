# -*- coding: utf-8 -*-
"""
Decision variables class for the DECVAR GWM file
"""
import os
import pandas as pd
import json


class GWM(object):
    """
    Groundwater Management model class
    """
    def __init__(self, name, workspace, IPRN, json_data):
        self.name = str(name)
        self.workspace = str(workspace)
        self.IPRN = IPRN
        self.json_data = json_data        
        self.obj_df = pd.DataFrame(json_data['objects'])
        self.varcon_df = pd.DataFrame(json_data['varConstraints'])
        self.sumcon_df = pd.DataFrame(json_data['sumConstraints'])
        self.hedcon_df = pd.DataFrame(json_data['calculatedConstraints'])
        self.packages = {}
    def setPackages(self, package):
        self.packages[package.__class__.__name__] = package
    def writeFileGWM(self):
        lines = []
        lines.append('# Wonderfull GWM file generated by that tool' + '\n')
        lines.append('# Listing of files required by GWM model' + '\n')
        for i in mod.packages:
            line = str(i) + '   ' + mod.packages[i].newFileName + '\n'
            lines.append(line)
        self.newFileName = os.path.join(self.workspace, self.name + '.gwm')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
    
    def writeInput(self):
        for package in self.packages:
            if self.packages[package].fileToBeWritten:
                self.packages[package].writeFile()
        namFile = os.path.join(self.workspace, self.name + '.nam')
        if os.path.exists(namFile):
            namFileDF = pd.read_table(namFile, delim_whitespace=True, header = None)
            lines = []
            for i in namFileDF.index.tolist():
                line = namFileDF.at[i,0] + ' ' + '1' + str(i)+ ' ' + namFileDF.at[i,2]+ '\n'
                lines.append(line)
            endLine = 'GWM' + ' ' + '1' + str(namFileDF.index.tolist()[-1] + 1) + ' ' + 'gwmpath' + '\n'
            lines.append(endLine)
            with open(namFile, 'w') as newNamFile:
                newNamFile.writelines(lines)
        else:
            print 'NAM file was not found in the working directory'
            return 'NAM file was not found in the working directory'
        self.writeFileGWM()
########################################################################################################################################       
        
class DECVAR(object):
    """
    GWM Decision Variables class
    """
    def __init__(self, model, IPRN = None, GWMFILE = 0):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.GWMFILE = GWMFILE
        self.FVAR_df = model.obj_df[model.obj_df['vType'] == 'flux']
        self.EVAR_df = model.obj_df[model.obj_df['vType'] == 'external']
        self.BVAR_df = model.obj_df[model.obj_df['binaryName'].notnull()]
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = len(self.FVAR_df.index) + len(self.EVAR_df.index) + len(self.BVAR_df.index) > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull decvar file generated by that tool' + '\n')
        lines.append('# Describtion of the decision variables used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' ' + str(self.GWMFILE) + ' # IPRN, GWMFILE' + '\n')
        lines.append(str(len(self.FVAR_df.index)) + ' ' + str(len(self.EVAR_df.index)) + ' ' + str(len(self.BVAR_df.index)) + ' # NFVAR, NEVAR, NBVAR' + '\n')
        
        if len(self.FVAR_df.index) > 0:
            for i in self.FVAR_df.index.tolist():
                lines.append(str(self.FVAR_df.at[i,'name']) + ' ' + str(self.FVAR_df.at[i,'numberOfCells']) + ' ' + str(self.FVAR_df.at[i,'lay']) + ' ' + str(self.FVAR_df.at[i,'row']) + ' ' + str(self.FVAR_df.at[i,'col']) + ' ' + str(self.FVAR_df.at[i,'fType']) + ' ' + str(self.FVAR_df.at[i,'fStat']) + ' ' + str(self.FVAR_df.at[i,'stressPeriods']) + '\n')
        if len(self.EVAR_df.index) > 0:
            for i in self.EVAR_df.index.tolist():
                lines.append(str(self.EVAR_df.at[i,'name']) + ' ' + str(self.EVAR_df.at[i,'fType']) + ' ' + str(self.EVAR_df.at[i,'stressPeriods']) + '\n')
        if len(self.BVAR_df.index) > 0:
            for i in self.BVAR_df.index.tolist():
                lines.append(str(self.BVAR_df.at[i,'binaryName']) + ' 1 ' + str(self.BVAR_df.at[i,'name']) + '\n')
        
        self.newFileName = os.path.join(self.workspace, self.name + '.decvar')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
  

########################################################################################################################################

class VARCON(object):
    """
    GWM Variables contrains class
    """
    def __init__(self, model, IPRN = None):
        self.varcon_df = model.varcon_df
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = len(self.varcon_df.index) > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull varcon file generated by that tool' + '\n')
        lines.append('# Describtion of the variables constraints used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
        
        for i in self.varcon_df.index.tolist():
            if str(self.varcon_df.at[i,'vType']) == 'flux':
                lines.append(str(self.varcon_df.at[i,'name']) + ' ' + str(float(self.varcon_df.at[i,'min'])) + ' ' + str(float(self.varcon_df.at[i,'max'])) + ' ' + str(float(self.varcon_df.at[i,'ref'])) + '\n')
            else:
                lines.append(str(self.varcon_df.at[i,'name']) + ' ' + str(float(self.varcon_df.at[i,'min'])) + ' ' + str(float(self.varcon_df.at[i,'max'])) + ' ' + '\n')
        self.newFileName = os.path.join(self.workspace, self.name + '.varcon')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
        
########################################################################################################################################

class SUMCON(object):
    """
    GWM Sum Constrains class
    """
    def __init__(self, model, IPRN = None):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.BINSUM_df = model.obj_df[['binarySumName','binaryName','binarySumCoef']][model.obj_df['binarySumName'].notnull()]
        self.SUM_df = model.obj_df[['sumName','name','sumCoef']][model.obj_df['sumName'].notnull()]
        self.sumcon_df = model.sumcon_df
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = len(self.sumcon_df.index) > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull sumcon file generated by that tool' + '\n')
        lines.append('# Describtion of the variables constraints used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
        lines.append(str(len(self.sumcon_df.index)) + ' # SMCNUM' + '\n')      
        
        for i in self.sumcon_df.index.tolist():
            if str(self.sumcon_df.at[i, 'type']) == 'binary':
                lines.append(str(self.sumcon_df.at[i, 'name']) + ' ' + str(len(self.BINSUM_df[self.BINSUM_df['binarySumName'] == self.sumcon_df.at[i, 'name']].index)) + ' ' + str(self.sumcon_df.at[i, 'bndType']) + ' ' + str(self.sumcon_df.at[i, 'bnd']) + '\n')
                for j in self.BINSUM_df[self.BINSUM_df['binarySumName'] == str(self.sumcon_df.at[i, 'name'])].index.tolist():                  
                    lines.append(str(self.BINSUM_df.at[j, 'binaryName']) + ' ' + str(self.BINSUM_df.at[j, 'binarySumCoef']) + '\n')
            else:
                lines.append(str(self.sumcon_df.at[i, 'name']) + ' ' + str(len(self.SUM_df[self.SUM_df['sumName'] == self.sumcon_df.at[i, 'name']].index)) + ' ' + str(self.sumcon_df.at[i, 'bndType']) + ' ' + str(self.sumcon_df.at[i, 'bnd']) + '\n')
                for j in self.SUM_df[self.SUM_df['sumName'] == str(self.sumcon_df.at[i, 'name'])].index.tolist():
                    lines.append(str(self.SUM_df.at[j, 'name']) + ' ' + str(self.SUM_df.at[j, 'sumCoef']) + '\n')
        
        self.newFileName = os.path.join(self.workspace, self.name + '.sumcon')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
        
########################################################################################################################################

class HEDCON(object):
    """
    GWM Head Constrains class
    """
    def __init__(self, model, IPRN = None):
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.HB_df = model.hedcon_df[model.hedcon_df['type'] == 'hb']
        self.DD_df = model.hedcon_df[model.hedcon_df['type'] == 'dd']
        self.DF_df = model.hedcon_df[model.hedcon_df['type'] == 'df']
        self.GD_df = model.hedcon_df[model.hedcon_df['type'] == 'gd']
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = len(self.HB_df.index) + len(self.DD_df.index) + len(self.DF_df.index) + len(self.GD_df.index) > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull hedcon file generated by that tool' + '\n')
        lines.append('# Head - constraints used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
        lines.append(str(len(self.HB_df.index)) + ' ' + str(len(self.DD_df.index)) + ' ' + str(len(self.DF_df.index)) + ' ' + str(len(self.GD_df.index)) + ' # NHB NDD NDF NGD' + '\n')
                
        if len(self.HB_df.index) > 0:
            for i in self.HB_df.index.tolist():
                lines.append(str(self.HB_df.at[i,'name']) + ' ' + str(self.HB_df.at[i,'lay']) + ' ' + str(self.HB_df.at[i,'row']) + ' ' + str(self.HB_df.at[i,'col']) + ' ' + str(self.HB_df.at[i,'bnd_type']) + ' ' + str(float(self.HB_df.at[i,'bnd'])) + ' ' + str(self.HB_df.at[i,'stressPeriods']) + '\n')
        if len(self.DD_df.index) > 0:
            for i in self.DD_df.index.tolist():
                lines.append(str(self.DD_df.at[i,'name']) + ' ' + str(self.DD_df.at[i,'lay']) + ' ' + str(self.DD_df.at[i,'row']) + ' ' + str(self.DD_df.at[i,'col']) + ' ' + str(self.DD_df.at[i,'bnd_type']) + ' ' + str(float(self.DD_df.at[i,'bnd'])) + ' ' + str(self.DD_df.at[i,'stressPeriods']) + '\n')
        if len(self.DF_df.index) > 0:
            for i in self.DF_df.index.tolist():
                lines.append(str(self.DF_df.at[i,'name']) + ' ' + str(self.DF_df.at[i,'lay']) + ' ' + str(self.DF_df.at[i,'row']) + ' ' + str(self.DF_df.at[i,'col']) + ' ' + str(self.DF_df.at[i,'bnd_type']) + ' ' + str(float(self.DF_df.at[i,'bnd'])) + ' ' + str(self.DF_df.at[i,'stressPeriods']) + '\n')
        if len(self.GD_df.index) > 0:
            for i in self.GD_df.index.tolist():
                lines.append(str(self.GD_df.at[i,'name']) + ' ' + str(self.GD_df.at[i,'lay']) + ' ' + str(self.GD_df.at[i,'row']) + ' ' + str(self.GD_df.at[i,'col']) + ' ' + str(self.GD_df.at[i,'bnd_type']) + ' ' + str(float(self.GD_df.at[i,'bnd'])) + ' ' + str(self.GD_df.at[i,'stressPeriods']) + '\n')
        
        self.newFileName = os.path.join(self.workspace, self.name + '.hedcon')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
        
########################################################################################################################################

class OBJFNC(object):
    """
    GWM Objective Function class
    """
    def __init__(self, model, IPRN = None):
        self.FNTYP = str(model.json_data['objectiveFunction']['functionType'])
        self.OBJTYP = str(model.json_data['objectiveFunction']['objectiveType'])
        self.IPRN = IPRN if IPRN is not None else model.IPRN
        self.FOBJ_df = model.obj_df[model.obj_df['vType'] == 'flux'][model.obj_df['objectiveRateFlg'] == 'Y'] 
        self.EOBJ_df = model.obj_df[model.obj_df['vType'] == 'external'][model.obj_df['objectiveRateFlg'] == 'Y']
        self.BOBJ_df = model.obj_df[model.obj_df['binaryName'].notnull()][model.obj_df['objectiveBinFlg'] == 'Y']
        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = len(self.FOBJ_df.index) + len(self.EOBJ_df.index) + len(self.BOBJ_df.index) > 0
        model.setPackages(self)
        
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull objfnc file generated by that tool' + '\n')
        lines.append('# Objective function variables and their weights used in the GWM' + '\n')
        lines.append(str(self.IPRN) + ' # IPRN' + '\n')
        lines.append(str(self.OBJTYP) + ' ' + str(self.FNTYP) + ' #OBJTYP  FNTYP' + '\n')
        lines.append(str(len(self.FOBJ_df.index)) + ' ' + str(len(self.EOBJ_df.index)) + ' ' + str(len(self.BOBJ_df.index)) + ' #NFOBJ  NEOBJ NBOBJ' + '\n')
        
        if len(self.FOBJ_df.index) > 0:
            for i in self.FOBJ_df.index.tolist():
                lines.append(str(self.FOBJ_df.at[i,'name']) + ' ' + str(float(self.FOBJ_df.at[i,'objectiveRateCoef'])) + '\n')
        if len(self.EOBJ_df.index) > 0:
            for i in self.EOBJ_df.index.tolist():
                lines.append(str(self.EOBJ_df.at[i,'name']) + ' ' + str(float(self.EOBJ_df.at[i,'objectiveRateCoef'])) + '\n')
        if len(self.BOBJ_df.index) > 0:
            for i in self.FOBJ_df.index.tolist():
                lines.append(str(self.BOBJ_df.at[i,'name']) + ' ' + str(float(self.BOBJ_df.at[i,'objectiveBinCoef'])) + '\n')

        self.newFileName = os.path.join(self.workspace, self.name + '.objfnc')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
        
########################################################################################################################################
     
class SOLN(object):
    """
    GWM Solver class
    """
    def __init__(self,model):
        self.SOLNTYP = str(model.json_data['solverData']['solnType'])
        if self.SOLNTYP == 'lp':
            self.IRM = int(model.json_data['solverData'][self.SOLNTYP]['irm'])
            self.LPITMAX = int(model.json_data['solverData'][self.SOLNTYP]['irm']) 
            self.BBITMAX = int(model.json_data['solverData'][self.SOLNTYP]['bbitmax'])
            self.DELTA = float(model.json_data['solverData'][self.SOLNTYP]['delta'])
            self.NSIGDIG = int(model.json_data['solverData'][self.SOLNTYP]['nsigdig'])
            self.NPGNMX = int(model.json_data['solverData'][self.SOLNTYP]['npgnmx'])
            self.PGFACT = float(model.json_data['solverData'][self.SOLNTYP]['pgfact'])
            self.CRITMFC = float(model.json_data['solverData'][self.SOLNTYP]['critmfc'])
            self.BBITPRT = int(model.json_data['solverData'][self.SOLNTYP]['bbitprt'])
            self.RANGE = int(model.json_data['solverData'][self.SOLNTYP]['range'])
            self.IBASE = int(model.json_data['solverData'][self.SOLNTYP]['ibase'])        

        self.workspace = model.workspace
        self.name = model.name
        self.fileToBeWritten = True
        model.setPackages(self)
    def writeFile(self):
        lines = []
        lines.append('# Wonderfull soln file generated by that tool' + '\n')
        lines.append('# Solver parameters used in the GWM' + '\n')
        lines.append(str(self.SOLNTYP) + ' # SOLNTYP' + '\n')
        lines.append(str(self.IRM) + ' # IRM' + '\n')
        lines.append(str(self.LPITMAX) + ' ' + str(self.BBITMAX) + ' #LPITMAX  BBITMAX' + '\n')
        lines.append(str(self.DELTA) + ' # DELTA' + '\n')
        lines.append(str(self.NSIGDIG) + ' ' + str(self.NPGNMX) + ' ' + str(self.PGFACT) + ' ' + str(self.CRITMFC) + ' #NSIGDIG NPGNMX PGFACT CRITMFC' + '\n')
        lines.append(str(self.BBITPRT) + ' ' + str(self.RANGE) + ' #BBITPRT  RANGE' + '\n')
        lines.append(str(self.IBASE) + ' # IBASE' + '\n')
        self.newFileName = os.path.join(self.workspace, self.name + '.soln')
        with open(self.newFileName, 'w') as newFile:
            newFile.writelines(lines)
#########################################################################################################################################
#
#class OUT(object):
#    """
#    GWM output control class
#    """
#    
#


########################################################################################################################################
with open('C:\\Users\\pk\\Desktop\\scripts\\gwm.json') as json_file:
    json_data = json.load(json_file)

        
name = 'test'
workspace = 'C:\\Users\\pk\\Desktop\\scripts\\gwm'
IPRN = 1    
mod = GWM(name, workspace, IPRN, json_data)
decvar = DECVAR(mod)
varcon = VARCON(mod)
sumcon = SUMCON(mod)
objfnc = OBJFNC(mod)
soln = SOLN(mod)
hedcon = HEDCON(mod)
mod.writeInput()
mod.writeFileGWM()